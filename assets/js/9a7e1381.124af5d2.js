"use strict";(self.webpackChunkpcapplusplus_github_io=self.webpackChunkpcapplusplus_github_io||[]).push([[2966],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,k=c["".concat(s,".").concat(m)]||c[m]||u[m]||r;return n?a.createElement(k,o(o({ref:t},d),{},{components:n})):a.createElement(k,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2845:function(e,t,n){var a=n(7294),i=n(907),r=n(4996);t.Z=function(e){var t=e.relativePath,n=e.children;return a.createElement("a",{href:(0,r.Z)("/api-docs/"+(0,i.zu)().label.toLowerCase()+t)},n)}},1054:function(e,t,n){var a=n(7294),i=n(2232);t.Z=function(e){var t=e.relativePath,n=e.children;return a.createElement("a",{href:(0,i.E2)()+t},n)}},2232:function(e,t,n){n.d(t,{hv:function(){return r},kq:function(){return o},K7:function(){return l},s6:function(){return s},u$:function(){return p},Wx:function(){return d},E2:function(){return u},rU:function(){return c},vR:function(){return m}});var a=n(907),i="https://github.com/seladb/PcapPlusPlus";function r(){return i}function o(){var e=(0,a.yW)(),t=(0,a.zu)();return"Next"===t.label?e.label:t.label}function l(e){return i+"/releases/tag/"+e}function s(){return l(o())}function p(){return i+"/archive/"+o()+".zip"}function d(){return i+"/archive/"+o()+".tar.gz"}function u(){var e=(0,a.zu)(),t="Next"===e.label?"master":e.label;return i+"/tree/"+t}function c(){return i+"/archive/master.zip"}function m(){return i+"/archive/master.tar.gz"}},1093:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return c},default:function(){return k}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=n(1054),l=n(2845),s=["components"],p={title:"DPDK Support",sidebar_position:4},d="DPDK Support",u={unversionedId:"dpdk",id:"version-v21.11/dpdk",title:"DPDK Support",description:"The Data Plane Development Kit (DPDK) is a set of data plane libraries and network interface controller drivers for fast packet processing, currently managed as an open-source project under the Linux Foundation. The DPDK provides a programming framework for x86, ARM, and PowerPC processors and enables faster development of high speed data packet networking applications (taken from Wikipedia).",source:"@site/versioned_docs/version-v21.11/dpdk.mdx",sourceDirName:".",slug:"/dpdk",permalink:"/test-new-site/docs/dpdk",editUrl:"https://github.com/PcapPlusPlus/pcapplusplus.github.io/edit/docusaurus/versioned_docs/version-v21.11/dpdk.mdx",tags:[],version:"v21.11",sidebarPosition:4,frontMatter:{title:"DPDK Support",sidebar_position:4},sidebar:"docs",previous:{title:"Feature Overview",permalink:"/test-new-site/docs/features"},next:{title:"Tutorials",permalink:"/test-new-site/docs/tutorials"}},c=[{value:"What does PcapPlusPlus offer for DPDK?",id:"what-does-pcapplusplus-offer-for-dpdk",children:[],level:2},{value:"Set up PcapPlusPlus with DPDK",id:"set-up-pcapplusplus-with-dpdk",children:[{value:"Supported DPDK versions",id:"supported-dpdk-versions",children:[],level:3},{value:"Download and install DPDK - prior to DPDK 20.11",id:"download-and-install-dpdk---prior-to-dpdk-2011",children:[],level:3},{value:"Download and install DPDK - DPDK 20.11 forward",id:"download-and-install-dpdk---dpdk-2011-forward",children:[],level:3},{value:"PcapPlusPlus configuration for DPDK",id:"pcapplusplus-configuration-for-dpdk",children:[],level:3},{value:"DPDK initialization with PcapPlusPlus",id:"dpdk-initialization-with-pcapplusplus",children:[],level:3},{value:"Initialization before application is run",id:"initialization-before-application-is-run",children:[],level:3},{value:"Initialization at application startup",id:"initialization-at-application-startup",children:[],level:3}],level:2},{value:"Next steps",id:"next-steps",children:[],level:2}],m={toc:c};function k(e){var t=e.components,n=(0,i.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"dpdk-support"},"DPDK Support"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.dpdk.org/"},(0,r.kt)("img",{src:"/img/logo-dpdk.png",alt:"drawing",width:"400"}))),(0,r.kt)("p",null,"The Data Plane Development Kit (DPDK) is a set of data plane libraries and network interface controller drivers for fast packet processing, currently managed as an open-source project under the Linux Foundation. The DPDK provides a programming framework for x86, ARM, and PowerPC processors and enables faster development of high speed data packet networking applications (taken from ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Data_Plane_Development_Kit"},"Wikipedia"),")."),(0,r.kt)("p",null,"DPDK provides packet processing in line rate using kernel bypass for a large range of network interface cards. Notice that not every NIC supports DPDK as the NIC needs to support the kernel bypass feature. You can read more about DPDK in ",(0,r.kt)("a",{parentName:"p",href:"https://www.dpdk.org/"},"DPDK's web-site")," and get a list of supported NICs ",(0,r.kt)("a",{parentName:"p",href:"http://core.dpdk.org/supported/"},"here"),"."),(0,r.kt)("p",null,"As DPDK API is written in C, PcapPlusPlus wraps its main functionality in easy-to-use C++ wrappers which have minimum impact on performance and packet processing rate. In addition it brings DPDK to the PcapPlusPlus framework and APIs so you can use DPDK together with other PcapPlusPlus features such as packet analysis, etc."),(0,r.kt)("h2",{id:"what-does-pcapplusplus-offer-for-dpdk"},"What does PcapPlusPlus offer for DPDK?"),(0,r.kt)("p",null,"PcapPlusPlus tries to cover the main functionality of DPDK and its most important and popular features. Here is what PcapPlusPlus offers for DPDK:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Encapsulation of DPDK's initialization process - both outside and inside of the application - using simple scripts and methods"),(0,r.kt)("li",{parentName:"ul"},"A C++ class wrapper for DPDK's packet structure (mbuf) which offers the most commonly used functionality"),(0,r.kt)("li",{parentName:"ul"},"A C++ class wrapper that encapsulates a DPDK-controlled NIC (A.K.A DPDK port) for receiving, processing and sending packets using DPDK as well as an interface to retrieve NIC info, status, etc."),(0,r.kt)("li",{parentName:"ul"},"Offload packet capture to multiple worker threads running on different cores + control the load balancing configuration between these workers"),(0,r.kt)("li",{parentName:"ul"},"Multi RX/TX queue support"),(0,r.kt)("li",{parentName:"ul"},"Detailed statistics about packets being captured and processed"),(0,r.kt)("li",{parentName:"ul"},"Seamless integration to other PcapPlusPlus capabilities including: parsing of packets received with DPDK using the various protocol parsers offered in PcapPlusPlus, saving packets to a pcap file, sending crafted/edited packets through a DPDK-controlled interface, packet reassembly, and more."),(0,r.kt)("li",{parentName:"ul"},"An easy-to-use C++ wrapper for ",(0,r.kt)("a",{parentName:"li",href:"https://doc.dpdk.org/guides/prog_guide/kernel_nic_interface.html"},"DPDK KNI (Kernel NIC Interface)"))),(0,r.kt)("h2",{id:"set-up-pcapplusplus-with-dpdk"},"Set up PcapPlusPlus with DPDK"),(0,r.kt)("h3",{id:"supported-dpdk-versions"},"Supported DPDK versions"),(0,r.kt)("p",null,"The following DPDK versions are currently supported:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DPDK 20.11 (LTS)"),(0,r.kt)("li",{parentName:"ul"},"DPDK 19.11 (LTS)"),(0,r.kt)("li",{parentName:"ul"},"DPDK 18.11 (LTS)"),(0,r.kt)("li",{parentName:"ul"},"DPDK 17.11 (LTS) (not regularly tested)")),(0,r.kt)("p",null,"Older and newer versions may not work.\nThe non-LTS versions may also work, but are not regularly tested."),(0,r.kt)("p",null,"In addition, not all poll-mode drivers (PMDs) were tested, but the majority of them should work. Please report an issue if the PMD you're using isn't working."),(0,r.kt)("p",null,"The following operating systems and configurations were tested:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Ubuntu 20.04, 18.04 LTS 64bit with kernel version > 3 and gcc version >= 4.8"),(0,r.kt)("li",{parentName:"ul"},"CentOS 7.1 64bit with kernel 3.x and gcc 4.8.x (not regularly tested)")),(0,r.kt)("h3",{id:"download-and-install-dpdk---prior-to-dpdk-2011"},"Download and install DPDK - prior to DPDK 20.11"),(0,r.kt)("p",null,"Building and installing DPDK is pretty straight-forward and in a nutshell goes like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ cd /dpdk/source/location\n$ make config T=[platform_type_string] && make\n")),(0,r.kt)("h3",{id:"download-and-install-dpdk---dpdk-2011-forward"},"Download and install DPDK - DPDK 20.11 forward"),(0,r.kt)("p",null,"DPDK changed their whole build system in version 20.11 and is now using ",(0,r.kt)("inlineCode",{parentName:"p"},"meson")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ninja"),". The full build instructions can be found ",(0,r.kt)("a",{parentName:"p",href:"https://doc.dpdk.org/guides-20.11/linux_gsg/build_dpdk.html"},"here"),", but here are the important steps in short:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"$ meson build\n$ cd build\n$ ninja\n$ ninja install\n$ ldconfig\n")),(0,r.kt)("p",null,"It is important to build and install DPDK and also run ",(0,r.kt)("inlineCode",{parentName:"p"},"ldconfig")," as mentioned in the documentation, otherwise PcapPlusPlus won't be able to find the DPDK binaries during the link process."),(0,r.kt)("h3",{id:"pcapplusplus-configuration-for-dpdk"},"PcapPlusPlus configuration for DPDK"),(0,r.kt)("p",null,"Once the DPDK build is completed successfully, run PcapPlusPlus configuration script (",(0,r.kt)("inlineCode",{parentName:"p"},"configure-linux.sh"),") to build PcapPlusPlus with DPDK. Please refer to the ",(0,r.kt)("a",{parentName:"p",href:"./install/linux#configuration"},"configuration instructions")," to get more details."),(0,r.kt)("h3",{id:"dpdk-initialization-with-pcapplusplus"},"DPDK initialization with PcapPlusPlus"),(0,r.kt)("p",null,"DPDK has two steps of initialization: one that sets up Linux to run DPDK applications and the other at the application level which initializes DPDK data and memory structures. PcapPlusPlus wraps both of them with easy-to-use interfaces. Please see the following two sections to get more information."),(0,r.kt)("h3",{id:"initialization-before-application-is-run"},"Initialization before application is run"),(0,r.kt)("p",null,"Several Linux configuration steps are needed to run DPDK applications:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"DPDK uses Linux huge-pages for faster virtual to physical page conversion resulting in better performance. Huge-pages must be set before a DPDK application is run"),(0,r.kt)("li",{parentName:"ul"},"DPDK uses a designated kernel module for kernel bypass (there are 3 supported options: ",(0,r.kt)("inlineCode",{parentName:"li"},"igb_uio"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"uio_pci_generic"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"vfio-pci"),"). This module needs to be loaded into the kernel if not already loaded"),(0,r.kt)("li",{parentName:"ul"},"One or more NICs should move from Linux control to DPDK control"),(0,r.kt)("li",{parentName:"ul"},"For DPDK KNI there is one more kernel to be loaded into the kernel (",(0,r.kt)("inlineCode",{parentName:"li"},"rte_kni.ko"),")")),(0,r.kt)("p",null,"PcapPlusPlus offers a python script that automatically configures all of the above. The script is located in PcapPlusPlus root directory and is named ",(0,r.kt)("inlineCode",{parentName:"p"},"setup_dpdk.py"),". It is based on the ",(0,r.kt)("a",{parentName:"p",href:"https://doc.dpdk.org/guides/tools/devbind.html"},(0,r.kt)("inlineCode",{parentName:"a"},"dpdk-devbind")," tool that ships with DPDK")," and extends it with more functionality. The script supports Python 3+."),(0,r.kt)("p",null,"This script has 3 modes of operation: ",(0,r.kt)("inlineCode",{parentName:"p"},"setup")," to configure the steps mentioned above, ",(0,r.kt)("inlineCode",{parentName:"p"},"status")," to view the status of all known network interfaces, and ",(0,r.kt)("inlineCode",{parentName:"p"},"restore")," to go back to the original Linux configuration."),(0,r.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,r.kt)("div",{parentName:"div",className:"admonition-heading"},(0,r.kt)("h5",{parentName:"div"},(0,r.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,r.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,r.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,r.kt)("div",{parentName:"div",className:"admonition-content"},(0,r.kt)("p",{parentName:"div"},"Note: this script uses another file named ",(0,r.kt)("inlineCode",{parentName:"p"},"setup_dpdk_settings.dat")," to keep information needed for restoring the Linux configuration. This file is also located in PcapPlusPlus root directory. Please do not remove this file"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Setup")," - takes the following parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-g"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--huge-pages")," ",(0,r.kt)("inlineCode",{parentName:"td"},"AMOUNT")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The amount of huge pages to allocate. By default each huge-page size is 2048KB")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-i"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--interface")," ",(0,r.kt)("inlineCode",{parentName:"td"},"NIC_NAME [NIC_NAME ...]")),(0,r.kt)("td",{parentName:"tr",align:"left"},"A space-separated list of all NICs that should move from Linux to DPDK control. Only these NICs can be used by DPDK, the others will stay under Linux control")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-m"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--dpdk-module")," ",(0,r.kt)("inlineCode",{parentName:"td"},"{igb_uio,uio_pci_generic,vfio-pci}")),(0,r.kt)("td",{parentName:"tr",align:"left"},"The DPDK module to load. If not specified the default is ",(0,r.kt)("inlineCode",{parentName:"td"},"igb_uio"),". ",(0,r.kt)("strong",{parentName:"td"},"NOTE:")," in DPDK 20.11 ",(0,r.kt)("inlineCode",{parentName:"td"},"igb_uio")," was moved outside of the DPDK repo into a ",(0,r.kt)("a",{parentName:"td",href:"https://git.dpdk.org/dpdk-kmods"},"separate repo")," which means it doesn't come out of the box and needs to be built separately. However the recommendation is to use either ",(0,r.kt)("inlineCode",{parentName:"td"},"vfio-pci")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"uio_pci_generic")," which come as part of most Linux distros. You can read more about it ",(0,r.kt)("a",{parentName:"td",href:"https://doc.dpdk.org/guides/linux_gsg/linux_drivers.html"},"here"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-k"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--load-kni")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Install the KNI kernel module (not loaded by default)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-p"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--kni-params")," ",(0,r.kt)("inlineCode",{parentName:"td"},"KNI_PARAMS")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Optional parameters for installing the KNI kernel module")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-v"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--verbose")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Print more verbose output")))),(0,r.kt)("p",null,"If everything goes well the system should be ready to run a DPDK applications and the output should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pcapplusplus@ubunu:~/PcapPlusPlus$ sudo python setup_dpdk.py setup -g 512 -i enp0s3\n[INFO] set up hugepages to 512\n[INFO] loaded kernel module 'uio'\n[INFO] loaded DPDK kernel module 'igb_uio'\n[INFO] set interface 'enp0s3' down\n[INFO] bound interface 'enp0s3' ['0000:00:03.0'] to 'igb_uio'\n[INFO] SETUP COMPLETE\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Status")," - shows the interfaces under DPDK and Linux control. In the example below one interface is under DPDK control and the other (",(0,r.kt)("inlineCode",{parentName:"p"},"enp0s8"),") is under Linux control:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pcapplusplus@ubunu:~/PcapPlusPlus$ sudo python setup_dpdk.py status\n\nNetwork devices using DPDK-compatible driver\n============================================\n0000:00:03.0 '82540EM Gigabit Ethernet Controller 100e' drv=igb_uio unused=e1000,vfio-pci,uio_pci_generic\n\nNetwork devices using kernel driver\n===================================\n0000:00:08.0 '82540EM Gigabit Ethernet Controller 100e' if=enp0s8 drv=e1000 unused=igb_uio,vfio-pci,uio_pci_generic *Active*\n\nNo 'Baseband' devices detected\n==============================\n\nNo 'Crypto' devices detected\n============================\n\nNo 'Eventdev' devices detected\n==============================\n\nNo 'Mempool' devices detected\n=============================\n\nNo 'Compress' devices detected\n==============================\n\nNo 'Misc (rawdev)' devices detected\n===================================\n")),(0,r.kt)("p",null,"This command take the following parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-v"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--verbose")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Print more verbose output")))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Restore")," - restores the Linux configuration to its previous state before ",(0,r.kt)("inlineCode",{parentName:"p"},"setup_dpdk.py setup")," was run. Please note that this command uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"setup_dpdk_settings.dat")," file to identify the previous state. If this file was deleted or moved the restore process will most likely fail. Please also note that a machine restart will probably restore most of this configuration, but this command enables restore without a machine restart."),(0,r.kt)("p",null,"If everything goes well the output should look something like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"pcapplusplus@ubunu:~/PcapPlusPlus$ sudo python setup_dpdk.py restore\n[INFO] removed hugepages\n[INFO] bound device '0000:00:03.0' back to 'e1000'\n[INFO] restored interface 'enp0s3'\n[INFO] removed 'igb_uio' kernel module\n[INFO] RESTORE COMPLETE\n")),(0,r.kt)("p",null,"This command take the following parameters:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"left"},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"left"},(0,r.kt)("inlineCode",{parentName:"td"},"-v"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"--verbose")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Print more verbose output")))),(0,r.kt)("h3",{id:"initialization-at-application-startup"},"Initialization at application startup"),(0,r.kt)("p",null,"When using DPDK in your application it should be initialized on application startup. This configuration includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Verify that huge-pages, kernel module(s) and NICs are all set"),(0,r.kt)("li",{parentName:"ul"},"Initialize DPDK internal structures and memory, poll-mode drivers etc."),(0,r.kt)("li",{parentName:"ul"},"Prepare CPU cores that will be used by the application"),(0,r.kt)("li",{parentName:"ul"},"Initialize packet memory pool"),(0,r.kt)("li",{parentName:"ul"},"Configure each NIC controlled by DPDK")),(0,r.kt)("p",null,"These steps are wrapped in one static method that should be called once in the application startup:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"DpdkDeviceList::initDpdk();\n")),(0,r.kt)("p",null,"If this methods succeeds DPDK is ready to be used in your application."),(0,r.kt)("h2",{id:"next-steps"},"Next steps"),(0,r.kt)("p",null,"If you're curious to learn more, please refer to the following resources:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"./tutorials/dpdk"},"DPDK tutorial")),(0,r.kt)("li",{parentName:"ul"},"DPDK example applications: ",(0,r.kt)("a",{parentName:"li",href:"./examples#dpdkexample-filtertraffic"},"DpdkExample-FilterTraffic"),", ",(0,r.kt)("a",{parentName:"li",href:"./examples#dpdkbridge"},"DpdkBridge"),", ",(0,r.kt)("a",{parentName:"li",href:"./examples#knipong"},"KniPong")),(0,r.kt)("li",{parentName:"ul"},"DPDK API reference. A good starting points would be ",(0,r.kt)(l.Z,{relativePath:"/_dpdk_device_8h.html#details",mdxType:"APIDocsLink"},(0,r.kt)("inlineCode",{parentName:"li"},"DpdkDevice.h")," file description")," and ",(0,r.kt)(l.Z,{relativePath:"/classpcpp_1_1_dpdk_device.html#details",mdxType:"APIDocsLink"},(0,r.kt)("inlineCode",{parentName:"li"},"DpdkDevice")," class description")),(0,r.kt)("li",{parentName:"ul"},"You can also find all the unit-tests in the ",(0,r.kt)(o.Z,{relativePath:"/Tests/Pcap%2B%2BTest/main.cpp",mdxType:"CodeLink"},"Pcap++Test"),' project (search for tests that contain "dpdk" or "kni")')))}k.isMDXComponent=!0}}]);